// ********RoostGPT********
/*
Test generated by RoostGPT for test OpenAI-Go_unit using AI Type Open AI and AI Model gpt-4

1. Test if the function CreateCompletion returns an error when the Stream attribute in the CompletionRequest is true.
2. Test if the function CreateCompletion returns an error when the Model attribute in the CompletionRequest is not supported by the endpoint.
3. Test if the function CreateCompletion returns an error when the Prompt type in the CompletionRequest is not supported.
4. Test if the function CreateCompletion successfully creates a new request when all the parameters in the CompletionRequest are valid and supported.
5. Test if the function CreateCompletion returns an error when the new request creation fails.
6. Test if the function CreateCompletion successfully sends a request and returns a response when the request is valid.
7. Test if the function CreateCompletion returns an error if there is a problem while sending the request.
8. Test if the function CreateCompletion correctly populates the response when the request is successfully sent.
9. Test if the function CreateCompletion handles context cancellation correctly.
10. Test if the function CreateCompletion correctly uses the "urlSuffix" and "Model" to create the full URL for the request.
11. Test if the function CreateCompletion correctly handles the case where the CompletionRequest is nil.
12. Test if the function CreateCompletion correctly handles the case where the CompletionRequest contains invalid JSON.
*/

// ********RoostGPT********
package openai

import (
	"context"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestCreateCompletion_3298b0c24f(t *testing.T) {
	tests := []struct {
		name    string
		request CompletionRequest
		wantErr bool
	}{
		{
			name: "Test Stream not supported",
			request: CompletionRequest{
				Stream: true,
			},
			wantErr: true,
		},
		{
			name: "Test Model not supported",
			request: CompletionRequest{
				Model: "unsupported_model",
			},
			wantErr: true,
		},
		{
			name: "Test prompt type not supported",
			request: CompletionRequest{
				Prompt: 123,
			},
			wantErr: true,
		},
		{
			name: "Test valid request",
			request: CompletionRequest{
				Model:  "valid_model",
				Prompt: "valid_prompt",
			},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				fmt.Fprintln(w, `{"ok":true}`)
			}))
			defer ts.Close()

			client := &Client{
				config: ClientConfig{
					BaseURL: ts.URL, 
				},
				requestBuilder: NewRequestBuilder(),  // Removed utils.
				createFormBuilder: NewFormBuilder(),  // Removed utils.
			}

			_, err := client.CreateCompletion(context.Background(), tt.request)
			if (err != nil) != tt.wantErr {
				t.Errorf("CreateCompletion() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
